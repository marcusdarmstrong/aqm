version: '3'

volumes:
  prometheus: {}
  grafana: {}
  loki: {}
  promtail: {}
  pihole: {}
  dnsmasq: {}

networks:
  public: {}
  # Traefik
  routable: {
    internal: true
  }
  # Prometheus
  metrics: {
    internal: true
  }
  # Grafana
  observability: {
    internal: true
  }
  # Loki
  logs: {
    internal: true
  }

services:

  nodeexporter:
    image: quay.io/prometheus/node-exporter:latest
    container_name: nodeexporter
    restart: unless-stopped
    command:
      - '--path.rootfs=/host'
      - '--collector.disable-defaults'
      - '--collector.cpu'
      - '--collector.loadavg'
      - '--collector.diskstats'
      - '--collector.filesystem'
      - '--collector.meminfo'
    pid: host
    volumes:
      - '/:/host:ro,rslave'
    ports:
    #  - 9100:9100
    networks:
      - metrics

  prometheus:
    container_name: prometheus
    image: prom/prometheus
    restart: unless-stopped
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./aqm/aqi.rules.yml:/etc/prometheus/aqi.rules.yml
      - prometheus:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--web.enable-remote-write-receiver'
      - '--storage.tsdb.retention.time=5y'
    ports:
      - 9090:9090
    labels: 
      - "traefik.http.routers.prometheus.rule=Host(`prometheus.local`)"
    networks:
      - metrics
      - routable
      - observability
      # For remote write capabilities
      - public

  grafana:
    container_name: grafana
    image: grafana/grafana
    restart: unless-stopped
    volumes:
      - ./grafana/config.ini:/etc/grafana/config.ini
      - ./grafana/datasources.yml:/etc/grafana/provisioning/datasources/default.yaml
      - ./grafana/dashboards.yml:/etc/grafana/provisioning/dashboards/default.yaml
      - ./aqm/dashboard.json:/var/lib/grafana/dashboards/aqm_dashboard.json
      - ./node-exporter/dashboard.json:/var/lib/grafana/dashboards/node_dashboard.json
      - grafana:/var/lib/grafana
    ports:
    #  - 3000:3000
    labels: 
      - "traefik.http.routers.grafana.rule=Host(`grafana.local`)"
      - "traefik.http.services.grafana.loadbalancer.server.port=3000"
    networks:
      - routable
      - observability

  loki:
    container_name: loki
    image: grafana/loki
    restart: unless-stopped
    ports:
     # - "3100:3100"
    command: -config.file=/etc/loki/local-config.yaml
    volumes:
      - ./loki/config.yml:/etc/loki/local-config.yaml
      - loki:/var/lib/loki
    networks:
      - logs
      - observability

  promtail:
    container_name: promtail
    image: grafana/promtail
    restart: unless-stopped
    volumes:
      - /var/log:/var/log
      - ./promtail/config.yml:/etc/promtail/config.yml
    command: -config.file=/etc/promtail/config.yml
    networks:
      - logs

  shairport:
    container_name: shairport
    image: mikebrady/shairport-sync
    restart: unless-stopped
    devices:
      - /dev/snd
    network_mode: host
    privileged: true
    command:
      - '--'
      - '-c PCM'

  reverse-proxy:
    container_name: reverse-proxy
    image: traefik:v2.7
    restart: unless-stopped
    command: 
      - '--api.insecure=true'
      - '--providers.docker'
      - '--providers.docker.network=aqm_routable'
    ports:
      - 80:80
      - 8080:8080
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    labels:
      - "traefik.http.routers.api.rule=Host(`traefik.local`)"
      - "traefik.http.routers.api.service=api@internal"
    networks:
      - public
      - routable

  mdns-publisher:
    container_name: mdns-publisher
    build: ./mdns-publisher
    restart: unless-stopped
    environment:
      TRAEFIK_API_HOST: 'http://reverse-proxy:8080'
      BINDING_IP_ADDRESS: '192.168.1.8'
      POLL_INTERVAL: '30000'
    volumes:
      - /run/dbus/system_bus_socket:/run/dbus/system_bus_socket
    networks:
      - routable

  pihole:
    container_name: pihole
    image: pihole/pihole:latest
    restart: unless-stopped
    ports:
      - "53:53/tcp"
      - "53:53/udp"
      # - "8888:80/tcp"
    environment:
      WEBPASSWORD: 'admin'
    volumes:
      - 'pihole:/etc/pihole'
      - 'dnsmasq:/etc/dnsmasq.d'    
    networks:
      - public
      - routable
    labels:
      - "traefik.http.routers.pihole.rule=Host(`pihole.local`)"
      - "traefik.http.services.pihole.loadbalancer.server.port=80"

  webhook:
    container_name: webhook
    image: staticfloat/docker-webhook
    restart: unless-stopped
    labels:
      - "traefik.http.routers.webhook.rule=Host(`webhook.local`) || PathPrefix(`/.webhook/`)"
    volumes:
      # Mount the docker socket to let us run docker commands in hook scripts.
      - /var/run/docker.sock:/var/run/docker.sock
      - ./webhook/:/app/hooks
    environment:
      - WEBHOOK_SECRET=${WEBHOOK_SECRET}
      - WEBHOOK_BRANCH_LIST=master,main

