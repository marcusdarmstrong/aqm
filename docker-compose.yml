version: '3'

volumes:
  prometheus: {}
  grafana: {}

services:

  nodeexporter:
    image: quay.io/prometheus/node-exporter:latest
    hostname: nodeexporter
    container_name: nodeexporter
    command:
      - '--path.rootfs=/host'
      - '--collector.disable-defaults'
      - '--collector.cpu'
      - '--collector.loadavg'
      - '--collector.diskstats'
      - '--collector.filesystem'
      - '--collector.meminfo'
    pid: host
    restart: unless-stopped
    volumes:
      - '/:/host:ro,rslave'
    ports:
      - 9100:9100

  prometheus:
    container_name: prometheus
    hostname: prometheus
    image: prom/prometheus
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - ./aqi.rules.yml:/etc/prometheus/aqi.rules.yml
      - prometheus:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--web.enable-remote-write-receiver'
      - '--storage.tsdb.retention.time=5y'
    ports:
      - 9090:9090
    restart: unless-stopped
    labels: 
      - "traefik.http.routers.prometheus.rule=Host(`prometheus.local`)"

  grafana:
    container_name: grafana
    hostname: grafana
    image: grafana/grafana
    volumes:
      - ./grafana_config.ini:/etc/grafana/config.ini
      - ./grafana_datasources.yml:/etc/grafana/provisioning/datasources/default.yaml
      - ./grafana_dashboards.yml:/etc/grafana/provisioning/dashboards/default.yaml
      - ./dashboard.json:/var/lib/grafana/dashboards/aqm_dashboard.json
      - grafana:/var/lib/grafana
    ports:
      - 3000:3000
    restart: unless-stopped
    labels: 
      - "traefik.http.routers.grafana.rule=Host(`grafana.local`)"

  shairport:
    container_name: shairport
    image: mikebrady/shairport-sync
    restart: unless-stopped
    devices:
      - /dev/snd
    network_mode: host
    privileged: true
    command:
      - '--'
      - '-c PCM'

  reverse-proxy:
    container_name: reverse-proxy
    image: traefik:v2.7
    restart: unless-stopped
    command: 
      - '--api.insecure=true'
      - '--providers.docker'
    ports:
      - 80:80
      - 8080:8080
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock

  mdns-publisher:
    container_name: mdns-publisher
    image: hardillb/traefik-avahi-helper
    restart: unless-stopped
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /run/dbus/system_bus_socket:/run/dbus/system_bus_socket
